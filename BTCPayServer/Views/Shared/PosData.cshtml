@using Microsoft.AspNetCore.Mvc.TagHelpers
@model (Dictionary<string, object> Items, int Level)

@functions {
    private bool IsValidURL(string source)
    {
        return Uri.TryCreate(source, UriKind.Absolute, out var uriResult) &&
               (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
    }

    private string RenderObject(object value)
    {
        return value switch
        {
            string str => IsValidURL(str) ? $"<a href='{str}' target='_blank' rel='noreferrer noopener'>{str}</a>" : str,
            Dictionary<string, object> dict => RenderDictionary(dict),
            IEnumerable<object> list => RenderList(list),
            _ => value?.ToString() ?? string.Empty
        };
    }

    private string RenderDictionary(Dictionary<string, object> dict)
    {
        var output = new System.Text.StringBuilder();
        output.Append("<table class='table table-sm w-100 m-0 mb-3'>");

        foreach (var (key, value) in dict)
        {
            output.Append($"<tr><th>{Html.Raw(key)}</th><td>{Html.Raw(RenderObject(value))}</td></tr>");
        }

        output.Append("</table>");
        return output.ToString();
    }

    private string RenderList(IEnumerable<object> list)
    {
        var output = new System.Text.StringBuilder();
        foreach (var item in list)
        {
            output.Append($"<div class='mb-2'>{Html.Raw(RenderObject(item))}</div>");
        }
        return output.ToString();
    }

}

@if (Model.Items.Any())
{
    string[] cartKeys = ["cart", "subtotal", "discount", "tip", "total"];
    <table class="table my-0" v-pre>
        @if (Model.Items.Keys.Any(key => cartKeys.Contains(key.ToLowerInvariant())))
        {
            _ = Model.Items.TryGetValue("cart", out var cart) || Model.Items.TryGetValue("Cart", out cart);
            var hasTotal = Model.Items.TryGetValue("total", out var total) || Model.Items.TryGetValue("Total", out total);
            var hasSubtotal = Model.Items.TryGetValue("subtotal", out var subtotal) || Model.Items.TryGetValue("subTotal", out subtotal) || Model.Items.TryGetValue("Subtotal", out subtotal);
            var hasDiscount = Model.Items.TryGetValue("discount", out var discount) || Model.Items.TryGetValue("Discount", out discount);
            var hasTip = Model.Items.TryGetValue("tip", out var tip) || Model.Items.TryGetValue("Tip", out tip);

            <tbody>
                <tr>
                    <td colspan="2">
                        @if (cart is Dictionary<string, object> { Keys.Count: > 0 } cartDict)
                        {
                            @Html.Raw(RenderDictionary(cartDict))
                        }
                        else if (cart is ICollection<object> { Count: > 0 } cartCollection)
                        {
                            @Html.Raw(RenderList(cartCollection))
                        }
                    </td>
                </tr>
            </tbody>
            <tfoot style="border-top-width:0">
                @if (hasSubtotal && (hasDiscount || hasTip))
                {
                    <tr style="border-top-width:3px">
                        <th>Subtotal</th>
                        <td class="text-end">@Html.Raw(RenderObject(subtotal))</td>
                    </tr>
                }
                @if (hasDiscount)
                {
                    <tr>
                        <th>Discount</th>
                        <td class="text-end">@Html.Raw(RenderObject(discount))</td>
                    </tr>
                }
                @if (hasTip)
                {
                    <tr>
                        <th>Tip</th>
                        <td class="text-end">@Html.Raw(RenderObject(tip))</td>
                    </tr>
                }
                @if (hasTotal)
                {
                    <tr style="border-top-width:3px">
                        <th>Total</th>
                        <td class="text-end">@Html.Raw(RenderObject(total))</td>
                    </tr>
                }
            </tfoot>
        }
        else
        {
            foreach (var (key, value) in Model.Items)
            {
                <tr>
                    @if (value is string str)
                    {
                        if (!string.IsNullOrEmpty(key))
                        {
                            <th>@key</th>
                        }
                        <td style="white-space:pre-wrap">
                            @* Explicitely remove whitespace at front here *@@if (IsValidURL(str))
                            {
                                <a href="@str" target="_blank" rel="noreferrer noopener">@str</a>
                            }
                            else
                            {
                                @str.Trim()
                            }
                        </td>
                    }
                    else if (value is Dictionary<string, object> { Count: > 0 } subItems)
                    {
                        <td colspan="2">
                            @{
                                @if (!string.IsNullOrEmpty(key))
                                {
                                    Write(Html.Raw($"<h{Model.Level + 3} class=\"mb-3 fw-semibold\">"));
                                    Write(key);
                                    Write(Html.Raw($"</h{Model.Level + 3}>"));
                                }
                            }
                            <partial name="PosData" model="@((subItems, Model.Level + 1))" />
                        </td>
                    }
                    else if (value is IEnumerable<object> valueArray)
                    {
                        <td colspan="2">
                            @{
                                @if (!string.IsNullOrEmpty(key))
                                {
                                    Write(Html.Raw($"<h{Model.Level + 3} class=\"mb-3 fw-semibold\">"));
                                    Write(key);
                                    Write(Html.Raw($"</h{Model.Level + 3}>"));
                                }
                            }
                            @foreach (var item in valueArray)
                            {
                                @if (item is Dictionary<string, object> { Count: > 0 } subItems2)
                                {
                                    <partial name="PosData" model="@((subItems2, Model.Level + 1))" />
                                }
                                else
                                {
                                    <partial name="PosData" model="@((new Dictionary<string, object> { { "", item } }, Model.Level + 1))" />
                                }
                            }
                        </td>
                    }
                </tr>
            }
        }
    </table>
}
