@using BTCPayServer.Plugins
@model BTCPayServer.Controllers.UIServerController.ListPluginsViewModel
@inject PluginService PluginService
@{
    ViewData.SetActivePage(ServerNavPages.Plugins, "Manage Plugins");
    var installed = Model.Installed.ToDictionary(plugin => plugin.Identifier, plugin => plugin.Version);
    var installedWithoutSystemPlugins = Model.Installed.Where(i => !i.SystemPlugin).ToList();
    var availableAndNotInstalled = new List<PluginService.AvailablePlugin>();
    var availableAndNotInstalledx = Model.Available
        .Where(plugin => !installed.ContainsKey(plugin.Identifier))
        .GroupBy(plugin => plugin.Identifier)
        .ToList();
    
    foreach (var availableAndNotInstalledItem in availableAndNotInstalledx)
    {
        var ordered = availableAndNotInstalledItem.OrderByDescending(plugin => plugin.Version).ToArray();
        availableAndNotInstalled.Add(ordered.FirstOrDefault(availablePlugin => PluginManager.DependenciesMet(availablePlugin.Dependencies, installed)) ?? ordered.FirstOrDefault());
    }

    bool DependentOn(string plugin)
    {
        foreach (var installedPlugin in Model.Installed)
        {
            if (installedPlugin.Dependencies.Any(dep => dep.Identifier.Equals(plugin, StringComparison.InvariantCultureIgnoreCase)))
            {
                return true;
            }
        }

        var pendingInstalls = Model.Commands.Where(tuple => tuple.command != "uninstall").Select(tuple => tuple.plugin).Distinct();
        foreach (var pendingInstall in pendingInstalls)
        {
            if (Model.Available.Any(availablePlugin => availablePlugin.Identifier.Equals(pendingInstall, StringComparison.InvariantCultureIgnoreCase) &&
                                                       availablePlugin.Dependencies.Any(dep => dep.Identifier.Equals(plugin, StringComparison.InvariantCultureIgnoreCase))))
            {
                return true;
            }
        }
        return false;
    }
}

<style>
    .version-switch .nav-link { display: inline; }
    .version-switch .nav-link.active { display: none; }
</style>

<div class="sticky-header">
    <h2 class="my-1">@ViewData["Title"]</h2>
</div>

<partial name="_StatusMessage" />

<div class="alert alert-warning alert-dismissible mb-4" role="alert">
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
        <vc:icon symbol="close" />
    </button>
    <h5 class="alert-heading">Important notice about plugins</h5> 
    <p class="mb-0">
        Plugins are developed by third parties. They need to be updated and maintained regularly in addition to BTCPay Server. Use plugins at your own risk.
        <a href="#warning-details" data-bs-toggle="collapse" class="alert-link">Read more</a>
    </p>
    <div class="collapse" id="warning-details">
        <p class="my-3"><strong>Use at Your Own Risk:</strong> Plugins in this store are developed by independent third parties. These plugins have not undergone review by the BTCPay Server team.</p>
        <p class="mb-3"><strong>Disclaimer of Responsibility:</strong> BTCPay Server contributors or Foundation are not liable for any harm, loss, or damage resulting from the installation or use of the plugins. Users assume full responsibility for their installation, use, familiarity with licensing and terms of service and maintenance.</p>
        <p class="mb-3"><strong>No Official Endorsement:</strong> Inclusion in the list of BTCPay Server plugins does not constitute an endorsement or guarantee of quality, safety, or compatibility.</p>
        <p class="mb-3"><strong>Due Diligence Advised:</strong> We recommend users exercise caution and conduct their own research or consult the community before installing any plugin.</p>
        <p class="mb-0"><strong>Feedback and Reporting:</strong> Should you experience issues with a plugin, please provide feedback or report concerns directly to the respective plugin developers.</p>
    </div>
</div>

@if (Model.Disabled.Any())
{
    <div class="alert alert-danger mb-4 d-flex align-items-center justify-content-between">
        Some plugins were disabled due to fatal errors. They may be incompatible with this version of BTCPay Server.
    </div>
    <div class="mb-5">
        <h3 class="mb-4">Disabled Plugins</h3>
        <ul class="list-group list-group-flush d-inline-block">
            @foreach (var (plugin, version) in Model.Disabled)
            {
                <li class="list-group-item px-0">
                    <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                        <span>
                            @plugin
                            @if (version != null)
                            {
                                <span>({version})</span>
                            }
                        </span>
                        <form asp-action="UnInstallPlugin" asp-route-plugin="@plugin">
                            <button type="submit" class="btn btn-sm btn-outline-danger">Uninstall</button>
                        </form>
                    </div>
                </li>
            }
        </ul>
    </div>
}

@if (Model.Commands.Any())
{
    <div class="alert alert-info mb-4 d-flex align-items-center justify-content-between">
        You need to restart BTCPay Server in order to update your active plugins.
        @if (Model.CanShowRestart)
        {
            <form method="post" asp-action="Maintenance" class="mt-2">
                <button type="submit" name="command" value="soft-restart" class="btn btn-info" asp-action="Maintenance">Restart now</button>
            </form>
        }
    </div>
}


@if (Model.Installed.Any())
{
    <div class="container-fluid mb-4">
        @foreach (var plugin in Model.Installed.Where(i => !i.SystemPlugin))
        {
            Model.DownloadedPluginsByIdentifier.TryGetValue(plugin.Identifier, out var downloadInfo);
            var matchedAvailable = Model.Available.Where(availablePlugin => availablePlugin.Identifier == plugin.Identifier && availablePlugin.Version > plugin.Version).OrderByDescending(availablePlugin => availablePlugin.Version).ToArray();
            var x = matchedAvailable.FirstOrDefault(availablePlugin => PluginManager.DependenciesMet(availablePlugin.Dependencies, installed)) ?? matchedAvailable.FirstOrDefault();
            var updateAvailable = matchedAvailable.Any();
            var modalId = $"modal_{plugin.Identifier}";
            <div class="card mb-4">
                <div class="card-body d-flex bg-transparent border-0">
                    <div class="me-3 d-flex justify-content-center align-items-center">
                        <img src="~/img/icons/icon-512x512.png" alt="@plugin.Name Image" class="rounded-4" style="width: 80px; height: 80px;">
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h4 class="card-title mb-0">@plugin.Name</h4>
                        </div>
                        <p class="card-text">@plugin.Description</p>
                    </div>
                    @{
                        var pendingAction = Model.Commands.LastOrDefault(tuple => tuple.plugin.Equals(plugin.Identifier, StringComparison.InvariantCultureIgnoreCase)).command;
                        var exclusivePendingAction = true;

                        var versionOfPendingInstall = PluginService.GetVersionOfPendingInstall(plugin.Identifier);
                    }
                    
                    <div class="d-flex flex-column gap-3 align-items-end">
                        @if (pendingAction is not null && updateAvailable)
                        {
                            var isUpdateAction = Model.Commands.Last(tuple => tuple.plugin.Equals(plugin.Identifier, StringComparison.InvariantCultureIgnoreCase)).command == "update";
                            if (isUpdateAction)
                            {
                                exclusivePendingAction = versionOfPendingInstall == x.Version;
                            }
                        }
                        @if (pendingAction is not null)
                        {
                            <form asp-action="CancelPluginCommands" asp-route-plugin="@plugin.Identifier">
                                <button type="submit" class="btn btn-outline-secondary">Cancel pending @pendingAction @(versionOfPendingInstall is null ? "" : $"of {versionOfPendingInstall}")</button>
                            </form>
                        }
                        @if (pendingAction is null || !exclusivePendingAction)
                        {
                            @if (updateAvailable && x != null)
                            {
                                if (PluginManager.DependenciesMet(x.Dependencies, installed))
                                {
                                    <form asp-action="InstallPlugin" asp-route-plugin="@plugin.Identifier" asp-route-version="@x.Version" asp-route-update="true" class="me-3">
                                        <button type="submit" class="btn btn-secondary">Update</button>
                                    </form>
                                }
                                else
                                {
                                    <form asp-action="InstallPlugin" asp-route-plugin="@plugin.Identifier" asp-route-version="@x.Version" asp-route-update="true" class="me-3">
                                        <button title="Schedule upgrade for when the dependencies have been met to ensure a smooth update" data-bs-toggle="tooltip" type="submit" class="btn btn-secondary">Schedule update</button>
                                    </form>
                                }
                            }
                            @if (DependentOn(plugin.Identifier))
                            {
                                <button type="button" class="btn btn-outline-danger" data-bs-toggle="tooltip" title="This plugin cannot be uninstalled as it is depended on by other plugins.">
                                    Uninstall <vc:icon symbol="warning" />
                                </button>
                            }
                            else
                            {
                                <form asp-action="UnInstallPlugin" asp-route-plugin="@plugin.Identifier">
                                    <button type="submit" class="btn btn-outline-danger">Uninstall</button>
                                </form>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No plugin found for the matching criteria</p>
}

@if (Model.Commands.Any())
{
    <div class="mb-4">
        <h3 class="mb-4">Pending Action</h3>
        <button class="btn btn-secondary mb-4" type="button" data-bs-toggle="collapse" data-bs-target="#pending-actions">
            Pending Actions
        </button>
        <div class="row collapse" id="pending-actions">
            <div class="col col-12 col-lg-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Pending actions</h4>
                        <ul class="list-group list-group-flush">
                            @foreach (var extComm in Model.Commands.GroupBy(tuple => tuple.plugin))
                            {
                                <li class="list-group-item p-2">
                                    <div class="d-flex flex-wrap align-items-center justify-content-between">
                                        <span class="my-2 me-3">@extComm.Key</span>
                                        <form asp-action="CancelPluginCommands" asp-route-plugin="@extComm.Key">
                                            <button type="submit" class="btn btn-outline-secondary">Cancel pending @extComm.Last().command</button>
                                        </form>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
